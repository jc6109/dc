Aim:
 A program to implement Intermediate code generation – Postfix, 
Prefix.

Algorithm:-
1. Declare set of operators.
2. Initialize an empty stack.
3. To convert INFIX to POSTFIX follow the following steps
4. Scan the infix expression from left to right.
5. If the scanned character is an operand, output it.
6. Else, If the precedence of the scanned operator is greater than 
the precedence of the
operator in the stack(or the stack is empty or the stack contains a 
‘(‘ ), push it.
7. Else, Pop all the operators from the stack which are greater 
than or equal to in precedence
than that of the scanned operator. After doing that Push the 
scanned operator to the stack.
8. If the scanned character is an ‘(‘, push it to the stack.
9. If the scanned character is an ‘)’, pop the stack and output it 
until a ‘(‘ is encountered, and
discard both the parenthesis.
10. Pop and output from the stack until it is not empty.
11. To convert INFIX to PREFIX follow the following steps
12. First, reverse the infix expression given in the problem.
13. Scan the expression from left to right.
14. Whenever the operands arrive, print them.
15. If the operator arrives and the stack is found to be empty, 
then simply push the operator
into the stack.
16. Repeat steps 6 to 9 until the stack is empty


CODE:
#include<bits/stdc++.h>
using namespace std;
int preced(char ch) {
 if(ch == '+' || ch == '-') {
 return 1; //Precedence of + or - is 1
 }else if(ch == '*' || ch == '/') {
 return 2; //Precedence of * or / is 2
 }else if(ch == '^') {
 return 3; //Precedence of ^ is 3
 }else {
 return 0;
 }
}
string inToPost(string infix) {
 stack<char> stk;
 stk.push('#'); //add some extra character to avoid underflow
 string postfix = ""; //initially the postfix string is empty
 string::iterator it;
 for(it = infix.begin(); it!=infix.end(); it++) {
 if(isalnum(char(*it)))
 postfix += *it; //add to postfix when character is letter or number
 else if(*it == '(')
 stk.push('(');
 else if(*it == '^')
 stk.push('^');
 else if(*it == ')') {
 while(stk.top() != '#' && stk.top() != '(') {
 postfix += stk.top(); //store and pop until ( has found
 stk.pop();
 }
 stk.pop(); //remove the '(' from stack
 }else {
 if(preced(*it) > preced(stk.top()))
 stk.push(*it); //push if precedence is high
 else {
 while(stk.top() != '#' && preced(*it) <= preced(stk.top())) {
 postfix += stk.top(); //store and pop until higher precedence is found
 stk.pop();
 }
 stk.push(*it);
 }
 }
 }
 while(stk.top() != '#') {
 postfix += stk.top(); //store and pop until stack is not empty
 stk.pop();
 }
 return postfix;
}
string inToPre(string infix) {
 string prefix;
 reverse(infix.begin(), infix.end()); //reverse the infix expression
 string::iterator it;
 for(it = infix.begin(); it != infix.end(); it++) { //reverse the parenthesis after reverse
 if(*it == '(')
 *it = ')';
 else if(*it == ')')
 *it = '(';
 }
 prefix = inToPost(infix); //convert new reversed infix to postfix form.
 reverse(prefix.begin(), prefix.end()); //again reverse the result to get final prefix form
 return prefix;
}
int main()
{
 string infix;
 cin>>infix;
 cout << "Prefix Form Is: " << inToPre(infix) << endl;
 cout << "Postfix Form Is: " << inToPost(infix) << endl; 
return 0;
}
